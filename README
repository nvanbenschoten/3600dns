 ____    __   ___   ___      _           
|___ \  / /  / _ \ / _ \    | |          
  __) |/ /_ | | | | | | | __| |_ __  ___ 
 |__ <| '_ \| | | | | | |/ _` | '_ \/ __|
 ___) | (_) | |_| | |_| | (_| | | | \__ \
|____/ \___/ \___/ \___/ \__,_|_| |_|___/

--- Team America ---

Nathaniel Dempkowski and Nathan VanBenschoten

----------------------
 High Level Approach
----------------------

To approach this project, we broke the problem of a DNS client into two logical parts: creating and sending a question packet, and receiving and interpreting a response packet.

Creating and sending the question packet was fairly simple because the question was so short and was comprised of simple parts and flags that largely don't change. The only real interpretation we had to do was changing our packet slightly depending on whether we wanted an A, MX, or NS record and converting the domain name requested to the DNS packet label format. We then send the packet with a 5 second timeout, and wait to receive a response, handling errors if something bad happens like us not receiving a response or the packet failing to send.

Interpreting the response is more complicated, as it is comprised of more parts, with more dynamic sections, and we additionally have to check all of these for validity, as we cannot assume that the DNS server will give us anything meaningful or non-malicious back. To get specific values from the response, we frequently parse specific parts of the response into usable C data types using bit masking and shifting. These values are then easily comparable in simple logical statements, where we handle errors as necessary. We first ensure that the header and question sent back from the server are valid and that relevant parts of the data match what we sent. While parsing, we keep track of an offset, which allows us to support many answers fairly easily. Next we parse as many answers as we received, printing relevant information according to the program specifications, and continuing to handle errors as necessary. To help with the parsing of labels, we created a helper function parseLabel, which is discussed in more detail below, but essentially gets the text representation of the DNS packet label, and moves the offset appropriately to continue parsing.

----------------------
 Challenges Faced
----------------------

We faced a number of challenges when creating our DNS Client. The first was handling 

Antoher challenge faced in the development of our system was handling DNS packet compression. In order to reduce the size of a message, domain systems utilize a compression scheme wherein they replace duplicated domain names in the NAME, QNAME, and RDATA with pointers to the prior occurrence of hte same name. This scheme results in the

----------------------
 Properties/Features
----------------------

Our DNS client supports the following command syntax:

    ./3600dns [-ns|-mx] @<server:port> <name>

Where -ns and -mx are optional flags that query for MX (mail server) and NS (name server) records. The port is also optional, defaulting to 53.

The program then prints a response to standard output with all of the records it received from the DNS server, supporting multiple answers of multiple types (CNAME & IP), and printing in a format similar to widely used utilities like dig. We also support common errors like NOTFOUND and NORESPONSE, and in other cases just print ERROR followed by a meaningful error. 

We successfully send a valid DNS question, and parse the most useful part of the DNS answer, while also checking it for errors and validity. This program would be usable as a simple DNS client to an end user, though it does not support some features like Authority and Additional sections of DNS packets, as they were not required as part of the project.

----------------------
 Testing Procedure
----------------------

We based our testing on the provided test but as our file system was split into different API functions, it was easy to debug and test those individually as we implemented them to ensure the components of our file systems were working as expected. During these tests we heavily used GDB to debug edge cases that we thought of and saw. To perform this testing, we found that we needed to run the file system in gdb in one shell, and then traverse/interact with the file system in another shell. Combining this process with a liberal use of hexdumping the disk allowed us to fully understand how our file system reacted to different actions, and where it was performing correctly and incorrectly. Throughout development we also modified the provided test to allow us to automatically test various specific cases. Additionally, we integrated git into our workflow as it provided a convenient tool for our workflow. In total we had ~150 commits. 

----------------------
 Bald Eagle
----------------------

                               /T /I
                              / |/ | .-~/
                          T\ Y  I  |/  /  _
         /T               | \I  |  I  Y.-~/
        I l   /I       T\ |  |  l  |  T  /
     T\ |  \ Y l  /T   | \I  l   \ `  l Y
 __  | \l   \l  \I l __l  l   \   `  _. |
 \ ~-l  `\   `\  \  \\ ~\  \   `. .-~   |
  \   ~-. "-.  `  \  ^._ ^. "-.  /  \   |
.--~-._  ~-  `  _  ~-_.-"-." ._ /._ ." ./
 >--.  ~-.   ._  ~>-"    "\\   7   7   ]
^.___~"--._    ~-{  .-~ .  `\ Y . /    |
 <__ ~"-.  ~       /_/   \   \I  Y   : |
   ^-.__           ~(_/   \   >._:   | l______
       ^--.,___.-~"  /_/   !  `-.~"--l_ /     ~"-.
              (_/ .  ~(   /'     "~"--,Y   -=b-. _)
               (_/ .  \  :           / l      c"~o \
                \ /    `.    .     .^   \_.-~"~--.  )
                 (_/ .   `  /     /       !       )/
                  / / _.   '.   .':      /        '
                  ~(_/ .   /    _  `  .-<_
                    /_/ . ' .-~" `.  / \  \          ,z=.
                    ~( /   '  :   | K   "-.~-.______//
                      "-,.    l   I/ \_    __{--->._(==.
                       //(     \  <    ~"~"     //
                      /' /\     \  \     ,v=.  ((
                    .^. / /\     "  }__ //===-  `
                   / / ' '  "-.,__ {---(==-
                 .^ '       :  T  ~"   ll      
                / .  .  . : | :!        \\			- Team America
               (_/  /   | | j-"          ~^
                 ~-<_(_.^-~"

			(Shamelessly stolen from the internet)
