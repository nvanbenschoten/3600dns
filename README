 ____    __   ___   ___      _           
|___ \  / /  / _ \ / _ \    | |          
  __) |/ /_ | | | | | | | __| |_ __  ___ 
 |__ <| '_ \| | | | | | |/ _` | '_ \/ __|
 ___) | (_) | |_| | |_| | (_| | | | \__ \
|____/ \___/ \___/ \___/ \__,_|_| |_|___/

--- Team America ---

Nathaniel Dempkowski and Nathan VanBenschoten

----------------------
 High Level Approach
----------------------

<<<<<<< HEAD
We have chosen to implement the inode-based file system layout.

At a high level, the disk is divided into the following seven different types of blocks:

- BLOCKS

Volume Control (VCB)
The VCB is the first block in the file system, and contains metadata about the entire disk and the location of the root directory. The location of the first FREE block is also stored in the VCB.

Directory Node (DNODE)
DNODE blocks denote a directory, and as a result there is one per directory, which contains metadata about the directory as well as pointers to the DIRENT blocks that actually contain directory entries.

Directory Entry (DIRENT)
DIRENT blocks contain the contents of directories, which is generally the name, type, and block number of each entry, along with the validity of that entry. 

File Node (INODE)
INODE blocks represent files, and thus contain metadata about the file including, size, user ID of the owner, group ID of the owner, and the permissions associated with the file.

Indirect (INDIRECT)
INDIRECT blocks store pointers to either DIRENT blocks or INDIRECT blocks. They are used to efficiently store additional information about directories as needed.

Data (DB)
DB blocks contain raw user data, and nothing else.

Free (FREE)
FREE blocks are blocks that can be used as necessary by the file system, which also store information abount the next free block as a singly linked list.

Upon the initial format of the disk, we create a VCB as block 0, a DNODE as block 1, a DIRENT as block 2, and FREE blocks as blocks 3-N. Anywhere a block number is stored, we also store the validity of that number, which serves as an efficient check for things like free space, and some directory entries. 

We chose to implement the inode-based file system layout because we felt that it was a more elegant and interesting design, and were willing to put in the extra effort that goes along with that. It also more closely mirrors modern file system layouts, and we felt there was more to be learned from implementing it.

We implement almost all of the core functionality that an end user would expect in our file system. Our disk is mountable and unmountable. Once the disk is mounted files and directories can be created, renamed, and deleted. We support metadata for files and directories like permissions, owners, and create, access, and modify times. We can read, write, and truncate the data for these files. Directories can be read, and we also support recursive directories as a usable filesystem should. Linux utilities like ls, cat, rm, touch, etc. generally work with our filesystem as expected.

- Helper Functions

seperatePathAndName
This function is given a path char point and a blank name char pointer. Using the index of the last '/', it fills the path character array with the path and the name character array with the file name

findDNODE
This function recursively steps through the file system using a path string which it modifies as it goes. The function takes a dnode (the root dnode during the first time it is called), a dnode path, and a blocknum pointer that it can fill in when it finds the needed dnode. It searches a dnodes direntries to find another dnode with the next needed dnode and will then call itself with this dnode and shortened path. When it is called with a path of '' or '/' it returns because it has found the correct dnode (which is currently in *directory)

getNODE
This function takes a directory, a name, pointers to an inode and a dnode it can fill in if it finds one, a return blocknumber, and a few flags. The function searches in the given directory for a valid direntry with the smae name as the passed in name. If it find it, it will set either the inode or the dnode pointers to the block and return. Additionally, the function takes two flags which allows it to perform other actions when the correct direntry is found. If the delete flag is set, the direntry will be set to invalid, and the dirent and the indirents will be deleted if they need to be. The directoryBlock also must be passed in in this case so that it can be written to update its state. If the rename flag is set, the direntry wil be renamed with the passed in new name.

getNextFree
This function gets the next free block from the vcb. If no free blocks are available, it returns an error. It also updates the vcb with the next available free block for its free block list. 

releaseFree
Releases a block by adding it to the vcb's free list and setting it to valid, finally writing the now freeblock to disk.

getName and setName
Deals with direntries so that a name with 27 characters not including the null terminator can be stored in the 27 byte buffer. It also allows this buffer to be translated to a null terminated string. 

bufdread and bufwrite
Abstracts the details of the disk interface away by dealing with casting to BLOCKSIZE char arrays and handling disk errors. Later was used to implement a cache without needing to change any code within the file system API. 

checkIntegrity
Performs a basic integrity check of the disk. This is called when the disk was not unmounted safely. The integrity check is done by first recording the locations of all known free blocks. We then traverse all dnodes and inodes, either recording their positions or marking them as invalid if there is a conflict with the free block list. Within inodes we check all data blocks and mark those as well. Finally we check for blocks that were not marked as either, and assume that those can be readded to the free list as they are not referenced by anything.

checkDNODE
Recursively checks through all dnodes, marking their status and fixing blocks that are already in the free list. This also updates the size of the dnode. This also calls checkINODE when it encounters an inode direntry.

checkINODE
Goes through an inode and checks all of its data blocks marking their status and fixing blocks that are already in the free list. At the end the size of the inode is also updated if it needs to be.

----------------------
 Challenges Faced
----------------------

We faced a number of challenges when creating our DNS Client. The first was handling 

Antoher challenge faced in the development of our system was handling DNS packet compression. In order to reduce the size of a message, domain systems utilize a compression scheme wherein they replace duplicated domain names in the NAME, QNAME, and RDATA with pointers to the prior occurrence of hte same name. This scheme results in the

----------------------
 Properties/Features
----------------------

We made a fully featured Inode based file system. This system allows for mounting, unmounting, getting attributes, creating files, reading from files, writing to files, truncating files, deleting files, reading a directory, creating a directory, changing the owner, group, and mode of a file, and updating metadata times. All of these API calls allowed for a well functioning file system which has all the features users expect from a file system.  

For extra credit, we implemented the ability to create and traverse multiple directories. This provided the challenge of both writing the mkdir function and making our findDNODE search recursively over dnodes. By making findDNODE recursive, we were able to accurately locate the current dnode no matter how deep in the directory structure it was located. Once this was implemented, our file system was truly usable. 

To cut down on the level of our disk reads, which take incredibly more time than memory reads, we implemented a 50KB cache (512 B/block * 100 blocks). Because we had already abstracted disk reads and writes away into our bufdread and bufdwrite functions (which allowed for unified error checking and buffered reading and writing), adding in a cache was simple. To do this, we created the cache memory itself, and two arrays with elements corresponding to blocks entries in the cache. The first array held the blockNums for each of the block entries in the cache. The second held the priority of each entry in the cache, allowing us to implement an effective LRU cache. When comparing the cache performance to the uncached performance, in one test where we created 100 files and read the directory three times, we found a drop from 192,566 reads from disk when uncached to only 109 reads. This huge improvement proved we had succeeded with our cache. 

If a disk was not unmounted safely upon its last use, we perform an integrity check at mount. This consists of cataloging free blocks and blocks we know are in use on the disk. We then look for contradictions in those lists and blocks that have not been cataloged and add those to the free list, updating file and directory nodes as necessary. This returns the disk to a usable state for the end user, though some data may be lost depending on when the disk was unmounted. This is important because otherwise our entire disk would be useless if it was not safely unmounted.

----------------------
 Testing Procedure
----------------------

We based our testing on the provided test but as our file system was split into different API functions, it was easy to debug and test those individually as we implemented them to ensure the components of our file systems were working as expected. During these tests we heavily used GDB to debug edge cases that we thought of and saw. To perform this testing, we found that we needed to run the file system in gdb in one shell, and then traverse/interact with the file system in another shell. Combining this process with a liberal use of hexdumping the disk allowed us to fully understand how our file system reacted to different actions, and where it was performing correctly and incorrectly. Throughout development we also modified the provided test to allow us to automatically test various specific cases. Additionally, we integrated git into our workflow as it provided a convenient tool for our workflow. In total we had ~150 commits. 

----------------------
 Bald Eagle
----------------------

                               /T /I
                              / |/ | .-~/
                          T\ Y  I  |/  /  _
         /T               | \I  |  I  Y.-~/
        I l   /I       T\ |  |  l  |  T  /
     T\ |  \ Y l  /T   | \I  l   \ `  l Y
 __  | \l   \l  \I l __l  l   \   `  _. |
 \ ~-l  `\   `\  \  \\ ~\  \   `. .-~   |
  \   ~-. "-.  `  \  ^._ ^. "-.  /  \   |
.--~-._  ~-  `  _  ~-_.-"-." ._ /._ ." ./
 >--.  ~-.   ._  ~>-"    "\\   7   7   ]
^.___~"--._    ~-{  .-~ .  `\ Y . /    |
 <__ ~"-.  ~       /_/   \   \I  Y   : |
   ^-.__           ~(_/   \   >._:   | l______
       ^--.,___.-~"  /_/   !  `-.~"--l_ /     ~"-.
              (_/ .  ~(   /'     "~"--,Y   -=b-. _)
               (_/ .  \  :           / l      c"~o \
                \ /    `.    .     .^   \_.-~"~--.  )
                 (_/ .   `  /     /       !       )/
                  / / _.   '.   .':      /        '
                  ~(_/ .   /    _  `  .-<_
                    /_/ . ' .-~" `.  / \  \          ,z=.
                    ~( /   '  :   | K   "-.~-.______//
                      "-,.    l   I/ \_    __{--->._(==.
                       //(     \  <    ~"~"     //
                      /' /\     \  \     ,v=.  ((
                    .^. / /\     "  }__ //===-  `
                   / / ' '  "-.,__ {---(==-
                 .^ '       :  T  ~"   ll      
                / .  .  . : | :!        \\			- Team America
               (_/  /   | | j-"          ~^
                 ~-<_(_.^-~"

			(Shamelessly stolen from the internet)
